"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1674],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,h=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return a?r.createElement(h,o(o({ref:t},u),{},{components:a})):r.createElement(h,o({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1621:function(e,t,a){a.r(t),a.d(t,{default:function(){return p},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return c}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),o=["components"],s={id:"mitochondria",title:"Mitochondria"},i={unversionedId:"tutorials/mitochondria",id:"tutorials/mitochondria",isDocsHomePage:!1,title:"Mitochondria",description:"This case study considers Mitochondria variant calling. We will call and benchmark variants in the mixture sample described in Fazzini et al..",source:"@site/docs/tutorials/mitochondria.md",sourceDirName:"tutorials",slug:"/tutorials/mitochondria",permalink:"/octopus/docs/tutorials/mitochondria",editUrl:"https://github.com/${organizationName}/${projectName}/edit/${branch}/website/docs/tutorials/mitochondria.md",version:"current",frontMatter:{id:"mitochondria",title:"Mitochondria"},sidebar:"docs",previous:{title:"Germline WGS",permalink:"/octopus/docs/tutorials/germline"}},c=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Download data",id:"download-data",children:[]},{value:"Map reads",id:"map-reads",children:[]},{value:"Call variants",id:"call-variants",children:[]},{value:"Evaluate variants",id:"evaluate-variants",children:[]}],u={toc:c};function p(e){var t=e.components,s=(0,n.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This case study considers Mitochondria variant calling. We will call and benchmark variants in the mixture sample described in ",(0,l.kt)("a",{parentName:"p",href:"https://www.mdpi.com/1422-0067/22/2/935"},"Fazzini et al."),"."),(0,l.kt)("p",null,"This tutorial is ",(0,l.kt)("a",{target:"_blank",href:a(7213).Z},"included")," as a ",(0,l.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/#"},"Snakemake")," workflow. Run it with"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ snakemake --snakefile mitochondria.smk -j 16 --use-singularity\n")),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/samtools/samtools"},"samtools")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/samtools/bcftools"},"bcftools")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/lh3/bwa"},"BWA")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/RealTimeGenomics/rtg-tools"},"RTG Tools")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/luntergroup/octopus"},"Octopus")," (with ",(0,l.kt)("a",{parentName:"li",href:"/octopus/docs/guides/filtering/forest"},"random forests")," installed).")),(0,l.kt)("p",null,"This tutorial assumes a directory structure like"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},".\n\u2514\u2500\u2500\u2500data\n\u2502   \u2514\u2500\u2500\u2500references\n\u2502   \u2514\u2500\u2500\u2500reads\n\u2502   \u2502   \u2514\u2500\u2500\u2500raw\n\u2502   \u2502   \u2514\u2500\u2500\u2500mapped\n\u2502   \u2514\u2500\u2500\u2500truth\n\u2514\u2500\u2500\u2500results\n    \u2514\u2500\u2500\u2500calls\n    \u2514\u2500\u2500\u2500eval\n")),(0,l.kt)("p",null,"We'll go ahead and create this upfront:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir -p data/{references,truth} data/reads/{raw,mapped}\n$ mkdir -p results/{calls,eval}\n")),(0,l.kt)("h2",{id:"download-data"},"Download data"),(0,l.kt)("p",null,"First, download PCR-amplified mitochondria Illumina MiSeq reads:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -o data/reads/raw/H1_U5.M4-Herk_S41.R1.fastq.gz https://zenodo.org/record/3991749/files/M4-Herk_S41_R1_001.fastq.gz\n$ curl -o data/reads/raw/H1_U5.M4-Herk_S41.R2.fastq.gz https://zenodo.org/record/3991749/files/M4-Herk_S41_R2_001.fastq.gz\n")),(0,l.kt)("p",null,"Next, we need a reference genome. For this tutorial we'll use GRCh38 with ALT and decoys contigs (hs38DH), which includes the revised Cambridge Reference Sequence (rCRS). The simplest way to get this is with ",(0,l.kt)("inlineCode",{parentName:"p"},"bwakit"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ run-gen-ref hs38DH\n$ mv hs38DH.fa* data/references\n")),(0,l.kt)("p",null,"We'll also need the truth variants to evaluate our calls, Fazzini et al. provide these in ",(0,l.kt)("a",{parentName:"p",href:"https://www.mdpi.com/1422-0067/22/2/935/s1?version=1611043746"},"Supplementary Table S7"),". However, since we'll need a VCF for benchmarking, we have manually translated these variants into VCF, which can be downloaded using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -o data/truth/H1_U5.vcf.gz https://github.com/luntergroup/octopus/blob/develop/website/static/assets/H1_U5.vcf.gz\n$ curl -o data/truth/H1_U5.vcf.gz.tbi https://github.com/luntergroup/octopus/blob/develop/website/static/assets/H1_U5.vcf.gz.tbi\n$ curl -o data/truth/H1_U5.highconf.bed https://github.com/luntergroup/octopus/blob/develop/website/static/assets/H1_U5.highconf.bed\n")),(0,l.kt)("h2",{id:"map-reads"},"Map reads"),(0,l.kt)("p",null,"First, we need to index the reference genome for alignment:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ samtools faidx data/references/hs38DH.fa\n$ bwa index data/references/hs38DH.fa\n")),(0,l.kt)("p",null,"Next, we map the raw reads to the reference genome with ",(0,l.kt)("inlineCode",{parentName:"p"},"bwa mem"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'$ bwa mem -t 16 \\\n     -R "@RG\\tID:S41\\tSM:H1_U5\\tLB:M4\\tPU:Illumina" \\\n     data/reference/hs38DH.fa \\\n     data/reads/raw/H1_U5.M4-Herk_S41.R1.fastq.gz data/reads/raw/H1_U5.M4-Herk_S41.R2.fastq.gz | \\\n     samtools view -bh | \\\n     samtools sort -@ 4 -o data/reads/mapped/H1_U5.M4-Herk_S41.hs38DH.bam -\n$ samtools index data/reads/mapped/H1_U5.M4-Herk_S41.hs38DH.bam\n')),(0,l.kt)("p",null,"This should complete in a few seconds."),(0,l.kt)("h2",{id:"call-variants"},"Call variants"),(0,l.kt)("p",null,"Now we can call variants with ",(0,l.kt)("inlineCode",{parentName:"p"},"octopus"),". Since we're aiming to call homoplasmic and heteroplasmic mitochondria variants, we'll be using the ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/models/polyclone"},"polyclone")," calling model. We'll use the provided mitochondria ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/advanced/configs"},"config")," which sets several options. We'll also set the ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/errorModels"},"sequence error model")," to reflect the PCR amplified library design of this sample. Finally, we ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/advanced/targeted"},"restrict calling")," to the mitochondria reference genome and use built-in ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/advanced/threading"},"multithreading"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ octopus \\\n     -R data/reference/hs37d5.fa \\\n     -I data/reads/mapped/H1_U5.M4-Herk_S41.hs38DH.bam \\\n     -T MT \\\n     --config /opt/octopus/resources/configs/mitochondria.config \\\n     --sequence-error-model PCR \\\n     -o results/calls/H1_U5.M4-PCR-Herk_S14.hs38DH.octopus.vcf.gz \\\n     --threads 16\n")),(0,l.kt)("p",null,"This should complete in ~30 minutes."),(0,l.kt)("h2",{id:"evaluate-variants"},"Evaluate variants"),(0,l.kt)("p",null,"Finally, we will evaluate our calls with RTG Tools ",(0,l.kt)("inlineCode",{parentName:"p"},"vcfeval"),". This tool requires the reference sequence to be preprocessed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ rtg format -o ~/reference/hs38DH.sdf ~/reference/hs38DH.fa\n")),(0,l.kt)("p",null,"Then evaluate the calls with ",(0,l.kt)("inlineCode",{parentName:"p"},"vcfeval"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ rtg vcfeval \\\n     -t data/reference/hs38DH.sdf \\\n     -b data/truth/H1_U5.vcf.gz \\\n     --evaluation-regions data/truth/H1_U5.highconf.bed \\\n     -c results/calls/H1_U5.M4-PCR-Herk_S14.hs38DH.octopus.vcf.gz \\\n     -o results/eval/H1_U5.M4-PCR-Herk_S14.hs38DH.octopus.pass.alt.vcfeval \\\n     --sample ALT \\\n     -m annotate \\\n     --ref-overlap\n")),(0,l.kt)("p",null,"We should see the following results:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"Threshold  True-pos-baseline  True-pos-call  False-pos  False-neg  Precision  Sensitivity  F-measure\n----------------------------------------------------------------------------------------------------\n")))}p.isMDXComponent=!0},7213:function(e,t,a){t.Z=a.p+"assets/files/mitochondria-71f7c758993381f29a37f8e9868e4b6f.smk"}}]);