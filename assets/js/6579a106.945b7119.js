"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4090],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),m=n,h=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return a?r.createElement(h,s(s({ref:t},c),{},{components:a})):r.createElement(h,s({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var u=2;u<l;u++)s[u]=a[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5901:function(e,t,a){a.r(t),a.d(t,{default:function(){return p},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return u}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),s=["components"],i={id:"germline",title:"Germline WGS"},o={unversionedId:"tutorials/germline",id:"tutorials/germline",isDocsHomePage:!1,title:"Germline WGS",description:"This case study considers whole-genome germline variant calling in an individual. We will use the syntheic-diploid sample CHM1-CHM13.",source:"@site/docs/tutorials/germline.md",sourceDirName:"tutorials",slug:"/tutorials/germline",permalink:"/octopus/docs/tutorials/germline",editUrl:"https://github.com/${organizationName}/${projectName}/edit/${branch}/website/docs/tutorials/germline.md",version:"current",frontMatter:{id:"germline",title:"Germline WGS"},sidebar:"docs",previous:{title:"Config files",permalink:"/octopus/docs/guides/advanced/configs"}},u=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Download data",id:"download-data",children:[]},{value:"Map reads",id:"map-reads",children:[]},{value:"Call variants",id:"call-variants",children:[]},{value:"Evaluate variants",id:"evaluate-variants",children:[]}],c={toc:u};function p(e){var t=e.components,i=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This case study considers whole-genome germline variant calling in an individual. We will use the syntheic-diploid sample ",(0,l.kt)("a",{parentName:"p",href:"https://www.nature.com/articles/s41592-018-0054-7"},"CHM1-CHM13"),"."),(0,l.kt)("p",null,"This tutorial is ",(0,l.kt)("a",{target:"_blank",href:a(7049).Z},"included")," as a ",(0,l.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/#"},"Snakemake")," workflow. Run it with"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ snakemake --snakefile germline.smk -j 16 --use-singularity\n")),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/samtools/samtools"},"samtools")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/samtools/bcftools"},"bcftools")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/lh3/bwa"},"BWA")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/RealTimeGenomics/rtg-tools"},"RTG Tools")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/luntergroup/octopus"},"Octopus")," (with ",(0,l.kt)("a",{parentName:"li",href:"/octopus/docs/guides/filtering/forest"},"random forests")," installed).")),(0,l.kt)("p",null,"This tutorial assumes a directory structure like"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},".\n\u2514\u2500\u2500\u2500data\n\u2502   \u2514\u2500\u2500\u2500references\n\u2502   \u2514\u2500\u2500\u2500reads\n\u2502   \u2502   \u2514\u2500\u2500\u2500raw\n\u2502   \u2502   \u2514\u2500\u2500\u2500mapped\n\u2502   \u2514\u2500\u2500\u2500truth\n\u2514\u2500\u2500\u2500results\n    \u2514\u2500\u2500\u2500calls\n    \u2514\u2500\u2500\u2500eval\n")),(0,l.kt)("p",null,"We'll go ahead and create this upfront:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir -p data/{references,truth} data/reads/{raw,mapped}\n$ mkdir -p results/{calls,eval}\n")),(0,l.kt)("h2",{id:"download-data"},"Download data"),(0,l.kt)("p",null,"First, download WGS CHM1-CHM13 PCR-free Illumina HiSeq-X10 reads (",(0,l.kt)("a",{parentName:"p",href:"https://www.ebi.ac.uk/ena/browser/view/PRJEB13208"},"PRJEB13208"),") from EBI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR134/003/ERR1341793/ERR1341793_1.fastq.gz | gzip > data/reads/raw/CHM1-CHM13_1.fastq.gz\n$ curl ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR134/003/ERR1341793/ERR1341793_2.fastq.gz | gzip > data/reads/raw/CHM1-CHM13_2.fastq.gz\n")),(0,l.kt)("p",null,"Next, we need a reference genome. In this example we'll use GRCh38 with ALT and decoys contigs (hs38DH). The simplest way to get this is with ",(0,l.kt)("inlineCode",{parentName:"p"},"bwakit"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ run-gen-ref hs38DH\n$ mv hs38DH.fa* data/references\n")),(0,l.kt)("p",null,"We'll also need the truth variants to evaluate our calls, which we can get from the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/lh3/CHM-eval"},"CHM-eval GitHub"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -L https://github.com/lh3/CHM-eval/releases/download/v0.5/CHM-evalkit-20180222.tar | tar xf - > data/truth/syndip\n")),(0,l.kt)("h2",{id:"map-reads"},"Map reads"),(0,l.kt)("p",null,"First, we need to index the reference genome for alignment:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ samtools faidx data/references/hs38DH.fa\n$ bwa index data/references/hs38DH.fa\n")),(0,l.kt)("p",null,"Next, we map the raw reads to the reference genome with ",(0,l.kt)("inlineCode",{parentName:"p"},"bwa mem"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'$ bwa mem -t 16 \\\n     -R "@RG\\tID:0\\tSM:CHM1-CHM1378\\tLB:Broad\\tPU:Illumina" \\\n     data/reference/hs38DH.fa \\\n     data/reads/raw/CHM1-CHM13_1.fastq.gz data/reads/raw/CHM1-CHM13_2.fastq.gz | \\\n     samtools view -bh | \\\n     samtools sort -@ 4 -o data/reads/mapped/CHM1-CHM13.hs38DH.bwa-mem.bam -\n$ samtools index data/reads/mapped/CHM1-CHM13.hs38DH.bwa-mem.bam\n')),(0,l.kt)("p",null,"This should take a few hours."),(0,l.kt)("h2",{id:"call-variants"},"Call variants"),(0,l.kt)("p",null,"Now we can call variants with ",(0,l.kt)("inlineCode",{parentName:"p"},"octopus"),". Since this is single-sample germline calling, we'll be using the ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/models/individual"},"individual")," calling model. We'll also set the ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/errorModels"},"sequence error model")," to reflect the PCR-free library design of this sample and Illlumina X10 sequencer, and use ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/filtering/forest"},"random forest filtering"),". Finally, we ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/advanced/targeted"},"restrict calling")," to the primary chromosomes and use the built-in ",(0,l.kt)("a",{parentName:"p",href:"/octopus/docs/guides/advanced/threading"},"multithreading"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ octopus \\\n     -R data/reference/hs38DH.fa \\\n     -I data/reads/mapped/CHM1-CHM13.hs38DH.bwa-mem.bam \\\n     -T chr1 to chrM \\\n     --sequence-error-model PCRF.X10 \\\n     --forest resources/forests/germline.v0.8.0.forest \\\n     -o results/calls/CHM1-CHM13.hs38DH.bwa-mem.octopus.vcf.gz \\\n     --threads 16\n")),(0,l.kt)("p",null,"This should complete in a few hours."),(0,l.kt)("h2",{id:"evaluate-variants"},"Evaluate variants"),(0,l.kt)("p",null,"Finally, we will evaluate our calls with RTG Tools ",(0,l.kt)("inlineCode",{parentName:"p"},"vcfeval"),". This tool requires the reference sequence to be preprocessed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ rtg format -o ~/reference/hs37d5.sdf ~/reference/hs37d5.fa\n")),(0,l.kt)("p",null,"Then evaluate the calls with ",(0,l.kt)("inlineCode",{parentName:"p"},"vcfeval"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ rtg vcfeval \\\n     -t data/reference/hs38DH.sdf \\\n     -b data/truth/syndip/full.38.vcf.gz \\\n     --evaluation-regions data/truth/syndip/full.38.bed.gz \\\n     -c results/calls/CHM1-CHM13.hs38DH.bwa-mem.octopus.vcf.gz \\\n     -o results/eval/CHM1-CHM13.hs38DH.bwa-mem.octopus.pass.vcfeval \\\n     -f RFGQ \\\n     -m annotate \\\n     --ref-overlap\n")),(0,l.kt)("p",null,"We should see the following results:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"Threshold  True-pos-baseline  True-pos-call  False-pos  False-neg  Precision  Sensitivity  F-measure\n----------------------------------------------------------------------------------------------------\n")))}p.isMDXComponent=!0},7049:function(e,t,a){t.Z=a.p+"assets/files/germline-71f7c758993381f29a37f8e9868e4b6f.smk"}}]);