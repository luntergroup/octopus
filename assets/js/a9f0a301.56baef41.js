"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return t?o.createElement(f,l(l({ref:n},u),{},{components:t})):o.createElement(f,l({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var s=2;s<i;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},843:function(e,n,t){t.r(n),t.d(n,{default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return s}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),l=["components"],a={id:"polyclone",title:"Polyclone"},c={unversionedId:"guides/models/polyclone",id:"guides/models/polyclone",isDocsHomePage:!1,title:"Polyclone",description:"The polyclone calling model is for calling variation in a pooled sample of haploid clones where the number and mixture composition of clones is unknown, as is sometimes the case in bacteria or virus sequencing studies.",source:"@site/docs/guides/models/polyclone.md",sourceDirName:"guides/models",slug:"/guides/models/polyclone",permalink:"/octopus/docs/guides/models/polyclone",editUrl:"https://github.com/${organizationName}/${projectName}/edit/${branch}/website/docs/guides/models/polyclone.md",version:"current",frontMatter:{id:"polyclone",title:"Polyclone"},sidebar:"docs",previous:{title:"Cancer",permalink:"/octopus/docs/guides/models/cancer"},next:{title:"Cell",permalink:"/octopus/docs/guides/models/cell"}},s=[{value:"Usage",id:"usage",children:[]},{value:"Performance considerations",id:"performance-considerations",children:[]}],u={toc:s};function p(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"polyclone")," calling model is for calling variation in a pooled sample of haploid clones where the number and mixture composition of clones is unknown, as is sometimes the case in bacteria or virus sequencing studies. "),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"If your sample contains an unknown mix of haploid clones (e.g. some bacteria or viral samples), use the ",(0,i.kt)("inlineCode",{parentName:"p"},"polyclone")," calling model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ octopus -R H37Rv.fa -I mycobacterium_tuberculosis.bam -C polyclone\n")),(0,i.kt)("p",null,"This model will automatically detect the number of subclones in your sample (up to the maximum given by ",(0,i.kt)("inlineCode",{parentName:"p"},"--max-clones"),")."),(0,i.kt)("h2",{id:"performance-considerations"},"Performance considerations"),(0,i.kt)("p",null,"The most important parameter in this model is ",(0,i.kt)("inlineCode",{parentName:"p"},"--max-clones")," which determines the maximum number of haplotypes that octopus will try to use to fit the data. This is a bit like setting the 'ploidy' for the sample. Higher values of ",(0,i.kt)("inlineCode",{parentName:"p"},"--max-clones")," may lead to longer runtimes and more memory usage - we do not recommend values above 10."))}p.isMDXComponent=!0}}]);